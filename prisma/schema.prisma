generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ORG_ADMIN
  LEARNER
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  passwordHash      String?
  mustResetPassword Boolean  @default(false)
  role              Role     @default(LEARNER)
  createdAt         DateTime @default(now())

  // Relations
  resetTokens     PasswordResetToken[]
  assignedCourses AssignedCourse[]
  certificates    Certificate[]
  progresses      Progress[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int?
  lessons     Int?     @default(0)
  image       String?
  introVideo  String?
  createdAt   DateTime @default(now())

  // Relations
  courseLessons Lesson[]
  assignments   AssignedCourse[]
  certificates  Certificate[]
  progresses    Progress[]
}

model Lesson {
  id          String  @id @default(cuid())
  title       String?
  duration    Int?
  summary     String?
  content     String?
  resourceUrl String?
  quizUrl     String?
  courseId    String

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String?  @unique
  createdAt DateTime @default(now())

  // Relations
  assignments  AssignedCourse[]
  certificates Certificate[]
}

/// Persist per-user per-course progress and quiz reports
model Progress {
  id       String @id @default(cuid())
  userId   String
  courseId String

  watchedSections Json?
  quizPassed      Json?
  quizReports     Json?

  progress  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // âœ… FIXED: Removed `name:` so Prisma generates userId_courseId alias
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model AssignedCourse {
  id           String  @id @default(cuid())
  userId       String
  courseId     String
  orgId        String?
  assignedById String?

  progress Int?             @default(0)
  status   AssignmentStatus @default(ASSIGNED)
  details  Json?

  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  org    Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId, orgId])
}

model Certificate {
  id       String   @id @default(cuid())
  userId   String
  courseId String
  orgId    String?
  filePath String
  issuedAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  org    Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, orgId], name: "unique_certificate_per_org")
}

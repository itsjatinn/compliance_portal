generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  role                 Role                 @default(LEARNER)
  createdAt            DateTime             @default(now())
  mustResetPassword    Boolean              @default(false)
  passwordHash         String?
  orgId                String?
  tempPassword         String?
  tempPasswordIssuedAt DateTime?
  assignedCourses      AssignedCourse[]
  certificates         Certificate[]
  resetTokens          PasswordResetToken[]
  progresses           Progress[]
  organization         Organization?        @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id            String           @id @default(cuid())
  title         String
  description   String?
  lessons       Int?             @default(0)
  image         String?
  createdAt     DateTime         @default(now())
  introVideo    String?
  duration      Int?
  assignments   AssignedCourse[]
  certificates  Certificate[]
  courseLessons Lesson[]
  progresses    Progress[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String?
  summary     String?
  content     String?
  resourceUrl String?
  quizUrl     String?
  courseId    String
  createdAt   DateTime @default(now())
  duration    Int?
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String           @id @default(cuid())
  name         String
  slug         String?          @unique
  createdAt    DateTime         @default(now())
  assignments  AssignedCourse[]
  certificates Certificate[]
  users        User[]
}

model Progress {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  watchedSections Json?
  quizPassed      Json?
  quizReports     Json?
  progress        Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model AssignedCourse {
  id           String           @id @default(cuid())
  userId       String
  courseId     String
  progress     Int?             @default(0)
  assignedAt   DateTime         @default(now())
  details      Json?
  assignedById String?
  orgId        String?
  status       AssignmentStatus @default(ASSIGNED)
  updatedAt    DateTime         @updatedAt
  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  org          Organization?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId, orgId])
}

model Certificate {
  id       String        @id @default(cuid())
  userId   String
  courseId String
  filePath String
  issuedAt DateTime      @default(now())
  orgId    String?
  course   Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  org      Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, orgId], name: "unique_certificate_per_org")
}

enum Role {
  ADMIN
  ORG_ADMIN
  LEARNER
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
